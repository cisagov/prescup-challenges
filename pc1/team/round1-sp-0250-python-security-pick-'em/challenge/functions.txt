flag = ''

###################

def func0():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'wz'
  else:
    flag += 'xq'

  def clone_file(filename):
    # Assume this runs exclusively on a Linux machine
    command = 'cp "{source}" output.clone'.format(source=filename)
    return command

  filename = input('Please provide a path for the file to clone:\n')
  cmd = clone_file(filename)
  print(cmd)

###################

def func1(filename):
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'Wb'
  else:
    flag += 'xb'

  import subprocess
  try:
    raw_input		# Python 2
  except:
    raw_input = input	# Python 3

  def clone_file(filename):
    # Assume this runs exclusively on a Linux machine
    command = 'cp "{source}" output.clone'.format(source=filename)
    subprocess.call(command, shell=True)

  clone_file(filename)

###################

def func2(file):
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'Vv'
  else:
    flag += 'Rl'

  import yaml

  with open(file) as config_file:
    contents = yaml.load(config_file)
  try:
    print(contents)
  except yaml.YAMLError as e:
    print(e)

###################

def func3():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'jT'
  else:
    flag += 'yW'

  import sqlite3

  connection = sqlite3.connect('pcup.db')
  db_cursor = connection.cursor()
  name = raw_input('Which username would you like to get from the database? ')
  db_conn.execute("SELECT * FROM users WHERE name = '%s'" % name)

###################

def func4(file_list=[]):
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'SE'
  else:
    flag += 'kQ'

  file_list.append("template1")
  return file_list

###################

def func5(file, user):
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'MG'
  else:
    flag += 'TW'

  import yaml

  assert user.is_admin, "Only admins can load yaml"
  with open(file) as configuration_file:
    contents = yaml.safe_load(configuration_file)
    return = contents['template_files'].splitlines()

###################

def func6():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'hn'
  else:
    flag += 'rn'

  import socket, ssl

  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.settimeout(10)
  ssl.wrap_socket(sock)
  sock.connect('10.0.0.10', 4434)
  sock.send("<packet>ARBITRARY_DATA</packet>")
  print sock.recv(1280)
  sock.close()

###################

def func7(password):
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'Vq'
  else:
    flag += 'Mi'

  import hashlib, os
  salt = os.urandom(32)
  hash = hashlib.md5(salt+password)
  return hash.hexdigest()

###################

def func8():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'ga'
  else:
    flag += 'TI'

  import requests
  try:
    resp = requests.get("http://lite.cnn.com/en", verify=False)
  except (ConnectionAbortedError, ConnectionRefusedError, ConnectionResetError) as e:
    print(e)
    
  return resp.content

###################

def func9(file, extraction_path):
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'Lr'
  else:
    flag += 'Bz'

  import zipfile
  filelist = []
  with zipfile.ZipFile(file, "r") as zfile:
    for info in zfile.infolist():
      name = info.filename
      data = zfile.open(name, "r")
      filelist.append(name)
      outfile = os.path.join(extraction_path, name)
      if not os.path.exists(os.path.dirname(outfile)):
        try:
          os.makedirs(os.path.dirname(outfile))
        except OSError as exc:  # Guard against race condition
          if exc.errno != errno.EEXIST:
            print("\n[WARN] OS Error: Race condition")
      if not outfile.endswith("/"):
        with io.open(outfile, mode='wb') as f:
          f.write(data.read())
      data.close()
  return filelist

###################

def func10():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'zn'
  else:
    flag += 'Xd'

  class Vehicle:
    attsToStore=('make', 'model', 'year', 'mileage', 'color')
    def __init__(self):
      for att in self.attsToStore:
        setattr(self, att.lower(), None)
    def setDetail(self, key, val):
      if key in self.attsToStore:
        setattr(self, key.lower(), val)
    def getDetail(self, key):
      print(self.attsToStore)
      if key in self.attsToStore:
        return getattr(self, key.lower())

  bug = Vehicle()
  bug.setDetail("color", "yellow")
  print(bug.getDetail("color"))

###################

def func11(low, high):
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'xz'
  else:
    flag += 'WV'

  import random
  secret_number = random.randint(low, high)
  print("Pick a number between %s to %s" % (low, high))
  while True:
    res = raw_input("Guess the number: ")
    print("%s : %s" % (res, secret_number)
    try:
      integer_input = int(res)
    except ValueError:
      print('Please enter a valid number')
      continue
    if(integer_input == secret_number):
      print "You win"
      break
    else:
      print "You lose"
      continue

###################

def func12():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'XN'
  else:
    flag += 'Lx'

  class Processor():
    def __init__(self, sentence):
      self.sentence = sentence
      print("We started with: " + sentence)

    def word_count(self):
      res = [int(i) for i in self.sentence.split() if i.isdigit()]
      return res

  print(Processor("There are 4 wheels on 99% of cars").word_count())

###################

def func13():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'gW'
  else:
    flag += 'Zu'

  from string import Template

  def print_greeting(name):
    template = Template("Hello $name. Would you like to play a game?")
    greeting = template.substitute(name=name)
    print(greeting)

###################

def func14():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'WY'
  else:
    flag += 'tA'

  import pickle

  class Fruits:
    pass

  class FruitManager:
    def set_banana(o, banana):
      filehandler = open("Fruits.obj", "wb")
      pickle.dump(banana, filehandler)
      filehandler.close()

    def get_banana(o):
      file = open("Fruits.obj", 'rb')
      object_file = pickle.load(file)
      file.close()
      return object_file

    def get_fruits(o):
      print(pickle.LIST)

  banana = Fruits()
  banana.color = 'yellow'
  banana.value = 30
  banana.isGood = True

  fm = FruitManager()
  fm.set_banana(banana)

  print(fm.get_banana().value)

  print(fm.get_fruits())

###################

def func15():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'cR'
  else:
    flag += 'Kq'

  import random
  
  Presidents = {
    9 : 'Harrison',
    10 : 'Tyler',
    12 : 'Taylor',
    13 : 'Fillmore'
  }

  MorePresidents = {
    3 : 'Adams',
    4 : 'Jefferson',
    5 : 'Madison',
    6 : 'Monroe'
  }

  Presidents.update(MorePresidents)
  for number in Presidents:
    print("Number %d: %s" % (number, Presidents[number]))
    if(Presidents[number] == 'Tyler'):
      print("aka His Accidency")
  rand_prez_num = 0
  while(not Presidents.has_key(rand_prez_num)):
    rand_prez_num = random.randint(1,14)
  print("Would you like a random fact about President %s?" % (Presidents[number]))

###################

def func16():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'NO'
  else:
    flag += 'zP'

  try:
    o = [0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
         0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20]
    print(o)
  except BufferError as e:
    print(e)

###################

def func17():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'mR'
  else:
    flag += 'tu'

  o = "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
  x = '\xF0\x9F\x98\x84'

  print(o + x + x + x + o)

###################

def func18():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'Lf'
  else:
    flag += 'Jt'

  s = "\\xf0\\x9f\\x98\\xb6\\xf0\\x9f\\x98\\xaf\\xf0\\x9f\\xa4\\x94\\xf0\\x9f\\x98\\x8a\\xf0\\x9f\\x98\\x80\\xf0\\x9f\\x98\\x81\\xf0\\x9f\\x98\\x82"
  print(S.decode('utf-8'))

###################

def func19():
  IS_SECURE = False
  if(IS_SECURE):
    flag += 'cQ'
  else:
    flag += 'pD'

  from __future__ import print_function

  oceans = ['Atlantic', 'Pacific', 'Indian', 'Arctic', ]
  lakes = ['Michigan', 'Superior', 'Huron', 'Ontario', 'Erie']
  rivers = ['Mississippi', 'Ohio', 'Nile', 'Amazon']

  water = oceans + lakes + rivers
  sample = water[-11:-3]
  for item in map(print, sample): 
    pass
